target.list = strsplit(gene.data$geneID[i], split = "/")[[1]]
target.symbol = transform_gene_symbol(target.list)
target.data = data.frame(gene=target.list, symbol=target.symbol)
target.data = select_number_of_data(target.data, target.number)
TF_target_edges = data.frame(from = gene.symbol, to=target.data$symbol, score = 1)
edges = rbind(edges, TF_target_edges)
target.nodes = cbind(target.nodes, target.symbol)
}
warnings()
edges = c()
target.nodes = c()
for(i in 1:go.number){
TF_go_edges = data.frame(from=gene.symbol, to=gene.data$Description[i], score = 1)
edges = rbind(edges, TF_go_edges)
target.list = strsplit(gene.data$geneID[i], split = "/")[[1]]
target.symbol = transform_gene_symbol(target.list)
target.data = data.frame(gene=target.list, symbol=target.symbol)
target.data = select_number_of_data(target.data, target.number)
TF_target_edges = data.frame(from = gene.symbol, to=target.data$symbol, score = 1)
edges = rbind(edges, TF_target_edges)
target.nodes = c(target.nodes, target.symbol)
}
target.nodes
target.nodes = unique(target.nodes)
go.number = nrow(gene.data)
nodes = data.frame(name = c(gene.symbol, gene.data$Description, target.nodes),
type = c("TF", rep("GO terms", go.number), rep("Targets", length(target.nodes))))
edges[1:5, ]
library(igraph)
net = graph_from_data_frame(edges, vertices = nodes, directed = FALSE)
plot(net)
E(net)
E(net)$weights
nodes_size = 8
shape_col = "white"
edges_col = "gray"
nodes_col = "blue"
nodes_text_size = 0.5
nodes_text_color = "black"
myl <- layout.fruchterman.reingold(net)
plot(graph.speed, main=main,
layout=myl,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
main = gene.symbol
nodes_size = 8
shape_col = "white"
edges_col = "gray"
nodes_col = "blue"
nodes_text_size = 0.5
nodes_text_color = "black"
myl <- layout.fruchterman.reingold(net)
plot(graph.speed, main=main,
layout=myl,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(graph.speed, main=main,
layout=layout_randomly,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
graph.speed
plot(net, main=main,
layout=layout_randomly,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_with_fr,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_with_fr(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_with_gem(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_as_bipartite(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_as_bipartite,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_as_tree,
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_nicely(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_in_circle(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_on_sphere(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_with_graphopt(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout_with_dh(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout.fruchterman.reingold(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
plot(net, main=main,
layout=layout.fruchterman.reingold.grid(net),
vertex.size=nodes_size,
vertex.frame.color=shape_col,
edge.color= edges_col,
vertex.color=nodes_col,
vertex.label.font=1,
vertex.label.cex=nodes_text_size,
vertex.label.color=nodes_text_color)
lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
target.data[1:5, ]
View(target.data)
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$syom = transform_gene_symbol(target.data$target)
View(target.data)
View(symbol)
get_target_data = function(gene.data, target.number){
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
target.data = select(target.data, target.number)
return(target.data)
}
target.data = get_target_data(gene.data = gene.data, target.number = target.number)
target.data
dim(target.data)
get_target_data(gene.data, target.number)
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
get_target_data = function(gene.data, target.number){
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
target.data = select_number_of_data(target.data, target.number)
return(target.data)
}
target.data = get_target_data(gene.data, target.number)
dim(target.data)
target.data = get_target_data(gene.data, target.number)
target.number = nrow(target.data)
tn = 1 + go.number + target.number
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn)
Protname = data.frame(name = c(gene, gene.data$Description, target.data$target),
label = c(gene.symbol, gene.data$Description, target.data$symbol),
type = c(gene.symbol, rep("GO Terms", go.number), rep("Target genes", target.number)))
c(gene, gene.data$Description, target.data$target)
target.data
c(gene, gene.data$Description, target.data$target)
gene
gene = "AT3G23250"
target.number = 30
go.number = 30
# 1. read the results of DEGRN
DEGRN = fread("data//Network_by_DEGRN.xls", check.names = F, header = T, sep = "\t")
# 2. select the interested TF datasets
gene.data = subset(DEGRN, TF == gene) %>%
filter(pvalue < 0.05) %>%
select_number_of_data(., go.number)
# check the number of GO
go.number = nrow(gene.data)
# transform the gene symbol for TF
gene.symbol = strsplit(gene.data$TF_Symbol, split = ",")[[1]][1]
# obtain the target genes
target.data = get_target_data(gene.data, target.number)
target.number = nrow(target.data)
gene
Protname = data.frame(name = c(gene, gene.data$Description, target.data$target),
label = c(gene.symbol, gene.data$Description, target.data$symbol),
type = c(gene.symbol, rep("GO Terms", go.number), rep("Target genes", target.number)))
Protname
target.data$target
get_target_data = function(gene.data, target.number){
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$target = as.character(target.data$target)
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
target.data = select_number_of_data(target.data, target.number)
return(target.data)
}
# obtain the target genes
target.data = get_target_data(gene.data, target.number)
target.number = nrow(target.data)
Protname = data.frame(name = c(gene, gene.data$Description, target.data$target),
label = c(gene.symbol, gene.data$Description, target.data$symbol),
type = c(gene.symbol, rep("GO Terms", go.number), rep("Target genes", target.number)))
Protname
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
net[1:5, 1:5,]
net[1:5, 1:5]
get_target_data = function(gene.data, target.number, full=FALSE){
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$target = as.character(target.data$target)
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
if( full == FALSE){
target.data = select_number_of_data(target.data, target.number)
}
return(target.data)
}
target.data.i = get_target_data(gene.data[i], full = TRUE)
target.data.i = get_target_data(gene.data[i, ], full = TRUE)
gene.data[i, ]
lapply(gene.data[i, ], function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
})
lapply(gene.data[i, ]$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
})
lapply(gene.data[i, ]$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
a = lapply(gene.data[i, ]$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
a
data.frame(table(a))
a = data.frame(table(a))
names(a) = c("target", "Greq")
names(a) = c("target", "Freq")
a[:15,]
a[1:15,]
a$target
a$target = as.character(a$target)
ransform_gene_symbol(target.data$target)
transform_gene_symbol(a$target)
a$symbol = transform_gene_symbol(a$target)
a[1:5, ]
a[order(a$Freq, decreasing = T),]
get_target_data = function(gene.data, target.number, FULL=FALSE){
target.list = lapply(gene.data$geneID, function(x){
a = strsplit(gene.data$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$target = as.character(target.data$target)
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
if( FULL == FALSE){
target.data = select_number_of_data(target.data, target.number)
}
return(target.data)
}
target.data.i = get_target_data(gene.data[i, ], FULL = TRUE)
names(target.data)
rm(list=ls())
setwd("D://workshop//SJTU//20211205_scrna_deep//DEGRN//")
library(data.table)
library(dplyr)
select_number_of_data = function(dat, num){
if(nrow(dat) > num){
dat = dat[1:num, ]
}
return(dat)
}
transform_gene_symbol = function(gene){
symbol = read.delim("data//Ath_total_gene_symbol.txt", header = F, check.names = F, sep = "\t")
names(symbol) = c("gene", "symbol", "Description")
symbol$symbol2 = lapply(symbol$symbol, function(x){
a = strsplit(x, split = "[||]")[[1]]
return(a[1])
}) %>% unlist()
gene.symbol = symbol$symbol2[match(gene, symbol$gene)]
return(gene.symbol)
}
get_target_data = function(dat, target.number, FULL=FALSE){
target.list = lapply(dat$geneID, function(x){
a = strsplit(dat$geneID[i], split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$target = as.character(target.data$target)
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
if( FULL == FALSE){
target.data = select_number_of_data(target.data, target.number)
}
return(target.data)
}
gene = "AT3G23250"
target.number = 30
go.number = 30
# 1. read the results of DEGRN
DEGRN = fread("data//Network_by_DEGRN.xls", check.names = F, header = T, sep = "\t")
# 2. select the interested TF datasets
gene.data = subset(DEGRN, TF == gene) %>%
filter(pvalue < 0.05) %>%
select_number_of_data(., go.number)
# check the number of GO
go.number = nrow(gene.data)
# transform the gene symbol for TF
gene.symbol = strsplit(gene.data$TF_Symbol, split = ",")[[1]][1]
# obtain the target genes
target.data = get_target_data(gene.data, target.number)
target.number = nrow(target.data)
Protname = data.frame(name = c(gene, gene.data$Description, target.data$target),
label = c(gene.symbol, gene.data$Description, target.data$symbol),
type = c(gene.symbol, rep("GO Terms", go.number), rep("Target genes", target.number)))
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
get_target_data = function(dat, target.number, FULL=FALSE){
target.list = lapply(dat$geneID, function(x){
a = strsplit(x, split = "/")[[1]]
return(a)
}) %>% unlist()
target.data = data.frame(table(target.list))
names(target.data) = c("target", "Freq")
target.data$target = as.character(target.data$target)
target.data$symbol = transform_gene_symbol(target.data$target)
target.data = target.data[order(target.data$Freq, decreasing = T), ]
if( FULL == FALSE){
target.data = select_number_of_data(target.data, target.number)
}
return(target.data)
}
# transform the gene symbol for TF
gene.symbol = strsplit(gene.data$TF_Symbol, split = ",")[[1]][1]
# obtain the target genes
target.data = get_target_data(gene.data, target.number)
target.number = nrow(target.data)
Protname = data.frame(name = c(gene, gene.data$Description, target.data$target),
label = c(gene.symbol, gene.data$Description, target.data$symbol),
type = c(gene.symbol, rep("GO Terms", go.number), rep("Target genes", target.number)))
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
i=1
target.data.i = get_target_data(gene.data[i, ], FULL = TRUE)
target.data.i
net[1, 2:(go.number+1)]
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
net[1, 2:(go.number+1)] = 1
for(i in 1:go.number){
target.data.i = get_target_data(gene.data[i, ], FULL = TRUE)
for(j in target.data.i){
if( j %in% target.data$target)
net[gene.data$Description[i], j] = 1
}
}
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
net[1, 2:(go.number+1)] = 1
for(i in 1:go.number){
target.data.i = get_target_data(gene.data[i, ], FULL = TRUE)
for(j in target.data.i){
if( j %in% target.data$target){
net[gene.data$Description[i], j] = 1
}
}
}
View(net)
j
tn = 1 + go.number + target.number
net = matrix(0, nrow = tn, ncol = tn, dimnames = list(Protname$name, Protname$name))
net[1, 2:(go.number+1)] = 1
for(i in 1:go.number){
target.data.i = get_target_data(gene.data[i, ], FULL = TRUE)
for(j in target.data.i$target){
if( j %in% target.data$target){
net[gene.data$Description[i], j] = 1
}
}
}
net.graph = graph.adjacency(adjmatrix=net, mode="undirected", weighted=TRUE)
V(net.graph)$name = Protnam$label
Protnam
Protname$label
net.graph = graph.adjacency(adjmatrix=net, mode="undirected", weighted=TRUE)
V(net.graph)$name = Protname$label
temp.degree=degree(net.graph)
pname <- Protname$label
temp.degree
pname[temp.degree==0]=NA
